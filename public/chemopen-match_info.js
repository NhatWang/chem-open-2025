const { DateTime } = luxon;
window.addEventListener("load", () => {
  setTimeout(() => {
    const overlay = document.getElementById("loadingOverlay");
    if (overlay) {
      overlay.classList.add("fade-out");
      setTimeout(() => {
        overlay.style.display = "none";
      }, 1000);
    }
  }, 0);
});

const tips = [
  "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Chem-Open 2025!",
  "ƒê√¢y l√† m·ªôt ho·∫°t ƒë·ªông c·ªßa Li√™n chi H·ªôi khoa Ho√° h·ªçc",
  "ƒê·ª£i m·ªôt ch√∫t nh√©! Ch√∫ng m√¨nh ƒëang chu·∫©n b·ªã m·ªçi th·ª©",
  "Xong r·ªìi n√®! B·∫Øt ƒë·∫ßu th√¥ii"
];

let index = 0;
const text = document.querySelector(".loading-text");
if (text) {
  text.textContent = tips[0];
  setInterval(() => {
    index = (index + 1) % tips.length;
    text.textContent = tips[index];
  }, 2500);
}

const events = ["ƒê∆†N NAM", "ƒê∆†N N·ªÆ", "ƒê√îI NAM", "ƒê√îI N·ªÆ", "ƒê√îI NAM N·ªÆ"];
const tabButtons = document.getElementById("tab-buttons");
const tabContents = document.getElementById("tab-contents");

function renderMatchTabs(matchData) {
  tabButtons.innerHTML = "";
  tabContents.innerHTML = "";

  events.forEach((eventName, idx) => {
    const tabBtn = document.createElement("div");
    tabBtn.className = "tab" + (idx === 0 ? " active" : "");
    tabBtn.innerText = eventName;
    tabBtn.dataset.tab = idx;
    tabButtons.appendChild(tabBtn);

    const tabDiv = document.createElement("div");
    tabDiv.className = "tab-content" + (idx === 0 ? " active" : "");
    tabDiv.id = `tab-${idx}`;

    const filtered = matchData
      .filter(m => (m.event || "").toUpperCase() === eventName)
      .sort((a, b) => new Date(a.time) - new Date(b.time));

    if (filtered.length > 0) {
      let html = `
        <table>
          <thead>
            <tr>
              <th>STT</th>
              <th>Th·ªùi gian</th>
              <th>ƒê·ªãa ƒëi·ªÉm</th>
              <th>V√≤ng ƒë·∫•u</th>
              <th>ƒê·ªëi th·ªß 1</th>
              <th>ƒê·ªëi th·ªß 2</th>
              <th>Set 1</th>
              <th>Set 2</th>
              <th>Set 3</th>
              <th>T·ªâ s·ªë</th>
              <th>Tr·∫°ng th√°i</th>
            </tr>
          </thead>
          <tbody>
      `;
      filtered.forEach((match, i) => {
        // L·∫•y th·ªùi ƒëi·ªÉm hi·ªán t·∫°i ·ªü m√∫i gi·ªù Vi·ªát Nam
        const now = DateTime.now().setZone("Asia/Ho_Chi_Minh");

        // L·∫•y th·ªùi gian b·∫Øt ƒë·∫ßu tr·∫≠n ƒë√£ ƒë∆∞·ª£c l∆∞u (c≈©ng ph·∫£i ·ªü m√∫i gi·ªù VN)
        const matchTime = DateTime.fromISO(match.time).setZone("Asia/Ho_Chi_Minh");

        // Gi·ªù k·∫øt th√∫c = matchTime + 30 ph√∫t
        const matchEnd = matchTime.plus({ minutes: 30 });

        // "Ng∆∞·ª°ng s·∫Øp b·∫Øt ƒë·∫ßu" = 10 ph√∫t tr∆∞·ªõc gi·ªù b·∫Øt ƒë·∫ßu
        const warningThreshold = matchTime.minus({ minutes: 10 });

        let statusClass = "";
        let statusLabel = "";

        if (now < warningThreshold) {
          // C√≤n xa h∆°n 10 ph√∫t ‚Üí "Ch∆∞a di·ªÖn ra"
          statusClass = "status-not-started";
          statusLabel = "Ch∆∞a di·ªÖn ra";
        } else if (now >= warningThreshold && now < matchTime) {
          // T·ª´ 10 ph√∫t tr∆∞·ªõc ƒë·∫øn ƒë√∫ng gi·ªù b·∫Øt ƒë·∫ßu ‚Üí "S·∫Øp b·∫Øt ƒë·∫ßu"
          statusClass = "status-upcoming";
          statusLabel = "S·∫Øp b·∫Øt ƒë·∫ßu";
        } else if (now >= matchTime && now <= matchEnd) {
          // T·ª´ gi·ªù b·∫Øt ƒë·∫ßu ƒë·∫øn gi·ªù k·∫øt th√∫c ‚Üí "ƒêang di·ªÖn ra"
          statusClass = "status-ongoing";
          statusLabel = "ƒêang di·ªÖn ra";
        } else {
          // Sau gi·ªù k·∫øt th√∫c ‚Üí "ƒê√£ k·∫øt th√∫c"
          statusClass = "status-finished";
          statusLabel = "ƒê√£ k·∫øt th√∫c";
        }

        let roundClass = "";
        if (match.round === "V√≤ng lo·∫°i") {
          roundClass = "round-vong-loai";
        } else if (match.round === "T·ª© k·∫øt") {
          roundClass = "round-tu-ket";
        } else if (match.round === "V√≤ng b√°n k·∫øt") {  // <-- s·ª≠a ch·ªó n√†y
          roundClass = "round-ban-ket";
        } else if (match.round === "V√≤ng chung k·∫øt") { // <-- v√† ·ªü ƒë√¢y
          roundClass = "round-chung-ket";
        }

        html += `
          <tr>
            <td>${i + 1}</td>
            <td>${formatVietnamTime(match.time)}</td>
            <td>${match.location || "-"}</td>
            <td class="${roundClass}">${match.round || "-"}</td>
            <td class="team">${match.team1}</td>
            <td class="team">${match.team2}</td>
            <td>${match.set1 || "-"}</td>
            <td>${match.set2 || "-"}</td>
            <td>${match.set3 || "-"}</td>
            <td><strong>${match.total || "-"}</strong></td>
            <td class="${statusClass}">${statusLabel}</td>
          </tr>
        `;
      });
      html += "</tbody></table>";
      tabDiv.innerHTML = html;
    } else {
      tabDiv.innerHTML = "<p>‚ö†Ô∏è Ch∆∞a c√≥ tr·∫≠n ƒë·∫•u n√†o cho n·ªôi dung n√†y.</p>";
    }

    tabContents.appendChild(tabDiv);
  });

  document.querySelectorAll(".tab").forEach(tab => {
    tab.addEventListener("click", () => {
      document.querySelectorAll(".tab").forEach(t => t.classList.remove("active"));
      document.querySelectorAll(".tab-content").forEach(c => c.classList.remove("active"));
      tab.classList.add("active");
      document.getElementById(`tab-${tab.dataset.tab}`).classList.add("active");
    });
  });
}

fetch("/api/matches", { credentials: "include" })
  .then(res => res.json())
  .then(matchData => {
    renderMatchTabs(matchData);

    // Socket.IO c·∫≠p nh·∫≠t realtime
    const socket = io();
    socket.on("match-updated", (updatedMatch) => {
      console.log("üì° Realtime c·∫≠p nh·∫≠t:", updatedMatch);
      fetch("/api/matches", { credentials: "include" })
        .then(res => res.json())
        .then(renderMatchTabs)
        .catch(err => {
          console.error("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t b·∫£ng:", err);
        });
    });
  })
  .catch(err => {
    console.error("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu tr·∫≠n ƒë·∫•u:", err);
    tabContents.innerHTML = "<p style='color: red;'>Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu tr·∫≠n ƒë·∫•u t·ª´ m√°y ch·ªß.</p>";
  });

function formatVietnamTime(datetimeStr) {
  if (!datetimeStr) return "-";

  const dt = DateTime.fromISO(datetimeStr).setZone("Asia/Ho_Chi_Minh");

  const weekdays = ["Ch·ªß nh·∫≠t", "Th·ª© 2", "Th·ª© 3", "Th·ª© 4", "Th·ª© 5", "Th·ª© 6", "Th·ª© 7"];
  const weekday = weekdays[dt.weekday % 7];

  return `${weekday}, ${dt.toFormat("dd/MM/yyyy - HH:mm")}`;
}