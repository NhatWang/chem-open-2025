window.addEventListener("load", () => {
  setTimeout(() => {
    const overlay = document.getElementById("loadingOverlay");
    if (overlay) {
      overlay.classList.add("fade-out");
      setTimeout(() => {
        overlay.style.display = "none";
      }, 1000); // 1s kh·ªõp v·ªõi th·ªùi gian fade
    }
  }, 10000); // ‚è±Ô∏è ƒë·ª£i 10 gi√¢y r·ªìi m·ªõi b·∫Øt ƒë·∫ßu fade
});

const tips = [
  "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Chem-Open 2025!",
  "ƒê√¢y l√† m·ªôt ho·∫°t ƒë·ªông c·ªßa Li√™n chi H·ªôi khoa Ho√° h·ªçc",
  "ƒê·ª£i m·ªôt ch√∫t nh√©! Ch√∫ng m√¨nh ƒëang chu·∫©n b·ªã m·ªçi th·ª©",
  "Xong r·ªìi n√®! B·∫Øt ƒë·∫ßu th√¥ii"
];

let index = 0;
  const text = document.querySelector(".loading-text");
  if (text) {
    text.textContent = tips[0];
    setInterval(() => {
      index = (index + 1) % tips.length;
      text.textContent = tips[index];
    }, 2500);
  }

let savedData = null;
let selectedPaymentMethod = "bank"; // m·∫∑c ƒë·ªãnh l√† bank

function isValidEmail(email) {
  const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return re.test(email);
}

function isValidPhone(phone) {
  const re = /^(0|\+84)[0-9]{9}$/;
  return re.test(phone);
}

document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("registrationForm");
  const checkboxes = document.querySelectorAll('input[name="noidung"]');
  const doiNamNuCheckbox = document.querySelector('input[value="ƒê√¥i nam n·ªØ"]');
  const partnerInfoSection = document.getElementById("partnerInfo");
  const partnerFields = partnerInfoSection.querySelectorAll("input, select");
  const khoaSelect = document.querySelector('select[name="khoa"]');
  const lopSelect = document.getElementById('lopSelect');
  const lopInput = document.getElementById('lopInput');

  khoaSelect.addEventListener('change', function () {
    if (this.value === "H√≥a h·ªçc") {
      lopSelect.style.display = "block";
      lopSelect.required = true;

      lopInput.style.display = "none";
      lopInput.required = false;
    } else {
      lopSelect.style.display = "none";
      lopSelect.required = false;

      lopInput.style.display = "block";
      lopInput.required = true;
    }
  });

  // Ph·∫ßn ng∆∞·ªùi thi c√πng
  const partnerKhoaSelect = document.getElementById('partnerKhoa');
  const partnerLopSelect = document.getElementById('partnerLopSelect');
  const partnerLopInput = document.getElementById('partnerLopInput');
  
  partnerKhoaSelect.addEventListener('change', function () {
    const isHoaHoc = this.value === "H√≥a h·ªçc";
  
    // Hi·ªÉn th·ªã select n·∫øu H√≥a h·ªçc, ng∆∞·ª£c l·∫°i th√¨ input text
    partnerLopSelect.style.display = isHoaHoc ? "block" : "none";
    partnerLopSelect.required = isHoaHoc;
  
    partnerLopInput.style.display = isHoaHoc ? "none" : "block";
    partnerLopInput.required = !isHoaHoc;
  
    // ‚ö†Ô∏è Xo√° gi√° tr·ªã n·∫øu b·ªã ·∫©n ƒë·ªÉ tr√°nh xung ƒë·ªôt khi submit
    if (!isHoaHoc) {
      partnerLopSelect.removeAttribute("required");
      partnerLopSelect.value = "";
      partnerLopInput.setAttribute("required", "true");
    } else {
      partnerLopInput.removeAttribute("required");
      partnerLopInput.value = "";
      partnerLopSelect.setAttribute("required", "true");
    }
  });
  // ‚úÖ Hi·ªán/·∫©n th√¥ng tin ng∆∞·ªùi th·ª© 2
  doiNamNuCheckbox.addEventListener("change", () => {
    if (doiNamNuCheckbox.checked) {
      partnerInfoSection.style.display = "block";
      partnerFields.forEach(input => {
        if (input.style.display !== "none") {
          input.setAttribute("required", "true");
        } else {
          input.removeAttribute("required");
        }
      });
    } else {
      partnerInfoSection.style.display = "none";
      partnerFields.forEach(input => input.removeAttribute("required"));
    }
  });

  // ‚úÖ X·ª≠ l√Ω ch·ªçn checkbox gi·ªõi h·∫°n
  checkboxes.forEach(checkbox => {
    checkbox.addEventListener("change", () => {
      const selected = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);
      if (selected.length === 3) {
        showToast("ƒêƒÉng k√Ω n·ªôi thi ƒë·∫•u kh√¥ng h·ª£p l·ªá.", "error");
        checkbox.checked = false;
      } else if (selected.includes("ƒê∆°n nam") && selected.includes("ƒê∆°n n·ªØ")) {
        showToast("Ch·ªâ ƒë∆∞·ª£c ch·ªçn 1 n·ªôi dung l√† ƒê∆°n nam ho·∫∑c ƒê∆°n n·ªØ.", "error");
        checkbox.checked = false;
      }
    });
  });

  // ‚úÖ X·ª≠ l√Ω submit
  form.addEventListener("submit", function (e) {
    e.preventDefault();

    const formData = new FormData(this);
    const fullName = formData.get("fullName");
    const mssv = formData.get("mssv");
    const selected = Array.from(document.querySelectorAll('input[name="noidung"]:checked')).map(cb => cb.value);
    const amount = getPaymentAmountFromSelected(selected);
    const phone = formData.get("phone");
    const email = formData.get("email");

    if (!isValidEmail(email)) {
      showToast("Email kh√¥ng h·ª£p l·ªá", "error");
      return;
    }
    
    if (!isValidPhone(phone)) {
      showToast("S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá", "error");
      return;
    }
    

    // Ki·ªÉm tra h·ª£p l·ªá
    const isValid = (
      (selected.length === 1 && (selected.includes("ƒê∆°n nam") || selected.includes("ƒê∆°n n·ªØ"))) ||
      (selected.length === 1 && selected.includes("ƒê√¥i nam n·ªØ")) ||
      (selected.length === 2 && selected.includes("ƒê√¥i nam n·ªØ") && (selected.includes("ƒê∆°n nam") || selected.includes("ƒê∆°n n·ªØ")))
    );

    if (!isValid) {
      showToast("Ch·ªçn n·ªôi dung kh√¥ng h·ª£p l·ªá.", "error");
      return;
    }
    // N·∫øu ch·ªçn ƒê√¥i nam n·ªØ th√¨ b·∫Øt bu·ªôc ki·ªÉm tra th√¥ng tin ng∆∞·ªùi th·ª© 2
    if (selected.includes("ƒê√¥i nam n·ªØ")) {
      const partnerKhoa = formData.get("partnerKhoa");
    
      const partnerLop = partnerKhoa === "H√≥a h·ªçc"
        ? document.getElementById("partnerLopSelect").value
        : document.getElementById("partnerLopInput").value;
    
      const requiredPartnerFields = {
        partnerName: formData.get("partnerName"),
        partnerEmail: formData.get("partnerEmail"),
        partnerPhone: formData.get("partnerPhone"),
        partnerKhoa,
        partnerLop,
        partnerMSSV: formData.get("partnerMSSV")
      };
    
      for (const [fieldName, value] of Object.entries(requiredPartnerFields)) {
        if (!value || value.trim() === "") {
          showToast("Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ng∆∞·ªùi ch∆°i th·ª© 2.", "error");
          return;
        }
      }
    }
    function generatePaymentCode() {
      const prefix = "CHEMO";
      const chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
      let suffix = "";
      for (let i = 0; i < 4; i++) {
        suffix += chars.charAt(Math.floor(Math.random() * chars.length));
      }
      return prefix + suffix;
    }
    // ‚úÖ L∆∞u d·ªØ li·ªáu
  const khoa = formData.get("khoa");
  const lop = khoa === "H√≥a h·ªçc" 
    ? document.getElementById("lopSelect").value 
    : document.getElementById("lopInput").value;
  const paymentCode = generatePaymentCode();
  savedData = {
    fullName,
    email,
    phone,
    khoa,
    lop,
    mssv,
    noidung: selected,
    amount,
    paymentMethod: selectedPaymentMethod,
    paymentCode,
    paymentStatus: "pending",
    partnerInfo: selected.includes("ƒê√¥i nam n·ªØ")
      ? {
          fullName: formData.get("partnerName"),
          email: formData.get("partnerEmail"),
          phone: formData.get("partnerPhone"),
          khoa: formData.get("partnerKhoa"),
          lop: formData.get("partnerKhoa") === "H√≥a h·ªçc"
            ? document.getElementById("partnerLopSelect").value
            : document.getElementById("partnerLopInput").value,
          mssv: formData.get("partnerMSSV")
        }
      : null
  };

    console.log("‚úÖ D·ªØ li·ªáu:", savedData);
    showToast("Th√¥ng tin h·ª£p l·ªá!", "success");
    fetch("/api/register", {
      method: "POST",
      headers: {
    "Content-Type": "application/json"
    },
      body: JSON.stringify(savedData)
    })
    .then(res => res.json())
    .then(result => {
      if (result.success) {
        console.log("‚úÖ ƒê√£ l∆∞u v√†o MongoDB:", result.data);
        savedData = result.data; // c·∫≠p nh·∫≠t n·∫øu MongoDB g√°n _id, expireAt,...
      } else {
        console.warn("‚ö†Ô∏è L∆∞u th·∫•t b·∫°i:", result.message);
        showToast("Kh√¥ng th·ªÉ l∆∞u th√¥ng tin, vui l√≤ng th·ª≠ l·∫°i.", "error");
      }
    })
    .catch(err => {
      console.error("‚ùå L·ªói g·ª≠i d·ªØ li·ªáu:", err);
      showToast("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.", "error");
    });

    // ‚úÖ QR & Chuy·ªÉn b∆∞·ªõc
    updateBankQR(mssv, fullName, selected, paymentCode);
    document.getElementById("registrationSection").style.display = "none";
    document.getElementById("paymentSection").style.display = "block";

    // ‚úÖ Render l·∫°i PayPal button
    const paypalContainer = document.getElementById("paypal-button-container");
    paypalContainer.innerHTML = "";
    paypal.Buttons({
      createOrder: function (data, actions) {
        const usd = (savedData.amount / 21500).toFixed(2);
        return actions.order.create({
          payer: {
            address: {
              country_code: "VN"
            }
          },
          purchase_units: [{
            amount: {
              value: usd,
              currency_code: "USD"
            },
            description: `Ph√≠ ƒëƒÉng k√Ω thi ƒë·∫•u: ${savedData.fullName} - ${savedData.mssv}`
          }]
        });
      },
      onApprove: function (data, actions) {
        return actions.order.capture().then(function (details) {
          showToast(`‚úÖ Thanh to√°n th√†nh c√¥ng! ${details.payer.name.given_name}`);
          console.log("üì¶ Giao d·ªãch th√†nh c√¥ng:", details);
      
          // G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t tr·∫°ng th√°i thanh to√°n
          return fetch("/api/update-payment", {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              mssv: savedData.mssv,
              paymentStatus: "paid"
            })
          });
        })
        .then(res => res.json())
        .then(data => {
          console.log("üîÑ C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng:", data);
          showToast("üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω!", "success");
          showFinalThankYouModal();
        })
          // ƒê√≥ng modal sau 5 gi√¢y
        .catch(err => {
          console.error("‚ùå L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err);
        });
      }      
    }).render(paypalContainer);
  // ‚úÖ X·ª≠ l√Ω chuy·ªÉn ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n

document.querySelectorAll(".payment-option").forEach(option => {
  option.addEventListener("click", () => {
    const method = option.getAttribute("data-method");
    selectedPaymentMethod = method;

    // ‚úÖ C·∫≠p nh·∫≠t radio
    const radio = option.querySelector('input[type="radio"]');
    if (radio) {
      radio.checked = true;
      radio.removeAttribute("required");
    }

    // ‚úÖ C·∫≠p nh·∫≠t hi·ªÉn th·ªã ph·∫ßn thanh to√°n t∆∞∆°ng ·ª©ng
    document.getElementById("bankTransferSection").style.display = method === "bank" ? "block" : "none";
    document.getElementById("paypal-button-container").style.display = method === "paypal" ? "block" : "none";

    // ‚úÖ C·∫≠p nh·∫≠t giao di·ªán ch·ªçn
    document.querySelectorAll(".payment-option").forEach(opt => opt.classList.remove("selected"));
    option.classList.add("selected");
  });
});
const backButton = document.getElementById("backButton");

backButton.addEventListener("click", () => {
  // ·∫®n ph·∫ßn thanh to√°n
  document.getElementById("paymentSection").style.display = "none";

  // Hi·ªán l·∫°i form ƒëƒÉng k√Ω
  document.getElementById("registrationSection").style.display = "block";

  // ‚úÖ ·∫®n ph·∫ßn ng∆∞·ªùi th·ª© 2 n·∫øu c√≥
  document.getElementById("partnerInfo").style.display = "none";

  // ‚úÖ ·∫®n QR n·∫øu ƒë√£ render
  document.getElementById("bankQRImg").src = "";
  document.getElementById("paymentAmountDisplay").textContent = "";
});
});

// ‚úÖ H√†m ph·ª• tr·ª£

function getPaymentAmountFromSelected(options) {
  if (options.length === 1 && (options.includes("ƒê∆°n nam") || options.includes("ƒê∆°n n·ªØ"))) return 70000;
  if (options.length === 1 && options.includes("ƒê√¥i nam n·ªØ")) return 150000;
  if (options.length === 2 && options.includes("ƒê√¥i nam n·ªØ") && (options.includes("ƒê∆°n nam") || options.includes("ƒê∆°n n·ªØ"))) return 220000;
  return 0;
}

function updateBankQR(mssv, fullName, selectedOptions, paymentCode) {
  const amount = getPaymentAmountFromSelected(selectedOptions);
  const accountNumber = "96247LCHHOAHOC"; // üëâ thay b·∫±ng s·ªë t√†i kho·∫£n c·ªßa b·∫°n
  const bankCode = "BIDV";              // üëâ m√£ ng√¢n h√†ng (MB, VCB, ACB,...)
  const note = `${mssv}%20${fullName}%20${selectedOptions.join("_")}%20${paymentCode}`;

  const sepayQRUrl = `https://qr.sepay.vn/img?acc=${accountNumber}&bank=${bankCode}&amount=${amount}&des=${note}`;

  const qrImg = document.getElementById("bankQRImg").src 
  qrImg.src = sepayQRUrl;
  document.getElementById("paymentAmountDisplay").textContent = `S·ªë ti·ªÅn c·∫ßn thanh to√°n: ${amount.toLocaleString("vi-VN")}‚Ç´`;
  setTimeout(() => {
    qrImg.src = "";
    document.getElementById("paymentAmountDisplay").textContent =
      "‚è∞ M√£ QR ƒë√£ h·∫øt h·∫°n. Vui l√≤ng t·∫£i l·∫°i form ƒë·ªÉ nh·∫≠n m√£ m·ªõi.";
    showToast("M√£ QR ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng k√Ω l·∫°i!", "error");
  }, 600000); // 10 ph√∫t
}


// üì° L·∫Øng nghe c·∫≠p nh·∫≠t tr·∫°ng th√°i t·ª´ server khi c√≥ thay ƒë·ªïi
const socket = io();
console.log("üîå Socket connected:", socket.connected);

socket.on("connect", () => {
  console.log("‚úÖ Socket.IO connected!");
});

socket.on("disconnect", () => {
  console.log("‚ùå Socket.IO disconnected");
});

socket.on("payment-updated", ({ mssv, status }) => {
  console.log("üì° ƒê√£ nh·∫≠n s·ª± ki·ªán t·ª´ server:", mssv, status);
  const currentMSSV = savedData?.mssv || document.querySelector("#modalPage1")?.textContent?.match(/\d{8}/)?.[0];

  console.log("üì° ƒê√£ nh·∫≠n s·ª± ki·ªán t·ª´ server:", mssv, status);
  console.log("üßæ MSSV hi·ªán t·∫°i:", currentMSSV);

  if (mssv === currentMSSV && status === "paid") {
    // ‚úÖ C·∫≠p nh·∫≠t local
    if (!savedData) savedData = {};
  savedData.paymentStatus = "paid";

    // ‚úÖ ·∫®n timer
    document.getElementById("countdownBox").style.display = "none";

    // ‚úÖ Toast th√†nh c√¥ng
    showToast("üéâ Thanh to√°n th√†nh c√¥ng!", "success");

    // ‚úÖ Hi·ªán modal c·∫£m ∆°n
    showFinalThankYouModal();
    setTimeout(() => window.location.href = "/", 3000);
  
    // ‚úÖ G·ª≠i l·∫°i d·ªØ li·ªáu v√†o MongoDB (n·∫øu ch∆∞a c√≥ _id ho·∫∑c b·∫°n mu·ªën update ch·∫Øc ch·∫Øn)
    fetch("/api/update-payment", {
      method: "PUT",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        mssv: savedData.mssv,
        paymentStatus: "paid",
        paymentCode: savedData.paymentCode
      })
    })
      .then(res => res.json())
      .then(result => {
        console.log("‚úÖ ƒê√£ xo√° expireAt:", result);
      })
      .catch(err => {
        console.error("‚ùå L·ªói khi l∆∞u d·ªØ li·ªáu ƒë√£ thanh to√°n:", err);
      });
  }
});

  const confirmBtn = document.getElementById("confirmInfoButton");
  const resultModal = document.getElementById("resultModal");
  const modalPage1 = document.getElementById("modalPage1");
  const modalPage2 = document.getElementById("modalPage2");
  const nextBtn = document.getElementById("nextPageBtn");
  const prevBtn = document.getElementById("prevPageBtn");
  const cancelBtn = document.getElementById("cancelBtn");
  const finalBtn = document.getElementById("finalConfirmBtn");

  if (!confirmBtn || !resultModal || !modalPage1) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ modal ho·∫∑c n√∫t x√°c nh·∫≠n.");
    return;
  }

  confirmBtn.addEventListener("click", () => {
    const form = document.getElementById("registrationForm");
    const formData = new FormData(form);

    modalPage1.innerHTML = `
      <h3>Th√¥ng tin c√° nh√¢n</h3>
      <p><strong>H·ªç t√™n:</strong> ${formData.get("fullName")}</p>
      <p><strong>Email:</strong> ${formData.get("email")}</p>
      <p><strong>SƒêT:</strong> ${formData.get("phone")}</p>
      <p><strong>Khoa:</strong> ${formData.get("khoa")}</p>
      <p><strong>L·ªõp:</strong> ${formData.get("lop")}</p>
      <p><strong>MSSV:</strong> ${formData.get("mssv")}</p>
      <p><strong>N·ªôi dung:</strong> ${(formData.getAll("noidung") || []).join(" + ")}</p>
    `;

    modalPage2.innerHTML = `
      <h3>Th√¥ng tin ƒë·ªìng ƒë·ªôi</h3>
      <p><strong>H·ªç t√™n:</strong> ${formData.get("partnerName") || "Kh√¥ng c√≥"}</p>
      <p><strong>Email:</strong> ${formData.get("partnerEmail") || "Kh√¥ng c√≥"}</p>
      <p><strong>SƒêT:</strong> ${formData.get("partnerPhone") || "Kh√¥ng c√≥"}</p>
      <p><strong>Khoa:</strong> ${formData.get("partnerKhoa") || "Kh√¥ng c√≥"}</p>
      <p><strong>L·ªõp:</strong> ${formData.get("partnerLop") || "Kh√¥ng c√≥"}</p>
      <p><strong>MSSV:</strong> ${formData.get("partnerMSSV") || "Kh√¥ng c√≥"}</p>
    `;

    resultModal.classList.add("show");
    modalPage1.style.display = "block";
    modalPage2.style.display = "none";
    nextBtn.style.display = "inline-block";
    prevBtn.style.display = "none";
    cancelBtn.style.display = "none";
    finalBtn.style.display = "none";
  });

  nextBtn.addEventListener("click", () => {
    modalPage1.style.display = "none";
    modalPage2.style.display = "block";
    nextBtn.style.display = "none";
    prevBtn.style.display = "inline-block";
    cancelBtn.style.display = "inline-block";
    finalBtn.style.display = "inline-block";
  });

  prevBtn.addEventListener("click", () => {
    modalPage1.style.display = "block";
    modalPage2.style.display = "none";
    nextBtn.style.display = "inline-block";
    prevBtn.style.display = "none";
    finalBtn.style.display = "none";
  });

  finalBtn.addEventListener("click", () => {
    resultModal.classList.remove("show");
    document.getElementById("registrationSection").style.display = "none";
    document.getElementById("paymentSection").style.display = "block";
    startCountdown(10);
  });

  document.getElementById("cancelBtn").addEventListener("click", () => {
  // ·∫®n modal
  document.getElementById("resultModal").classList.remove("show");

  // Hi·ªán l·∫°i form ƒëƒÉng k√Ω
  document.getElementById("registrationSection").style.display = "block";

  // ·∫®n ph·∫ßn thanh to√°n n·∫øu ƒëang m·ªü
  document.getElementById("paymentSection").style.display = "none";

  // Reset modal v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu
  document.getElementById("modalPage1").style.display = "block";
  document.getElementById("modalPage2").style.display = "none";
  document.getElementById("nextPageBtn").style.display = "inline-block";
  document.getElementById("prevPageBtn").style.display = "none";
  document.getElementById("finalConfirmBtn").style.display = "none";

  // N·∫øu QR ƒë√£ hi·ªÉn th·ªã th√¨ xo√° ·∫£nh v√† text
  document.getElementById("bankQRImg").src = "";
  document.getElementById("paymentAmountDisplay").textContent = "";
});
});
window.showFinalThankYouModal = function () {
  const modal = document.createElement("div");
  modal.style.cssText = `
    position: fixed;
    top: 0; left: 0;
    width: 100%; height: 100%;
    background: rgba(0,0,0,0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
  `;
  modal.innerHTML = `
    <div style="background: white; padding: 30px; border-radius: 10px; text-align: center;">
      <h2>üéâ C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω gi·∫£i ƒë·∫•u!</h2>
      <button id="closeThankYouModal" style="margin-top: 20px; padding: 10px 20px;">ƒê√≥ng</button>
    </div>
  `;
  document.body.appendChild(modal);

  document.getElementById("closeThankYouModal").addEventListener("click", () => {
    modal.remove();
  });
}
function showToast(message, type = "info") {
  const toast = document.createElement("div");
  toast.className = `custom-toast ${type}`;
  toast.textContent = message;

  document.body.appendChild(toast);

  // Force reflow to trigger animation
  requestAnimationFrame(() => {
    toast.classList.add("show");
  });

  setTimeout(() => {
    toast.classList.remove("show");
    toast.addEventListener("transitionend", () => toast.remove());
  }, 3000);
}
function startCountdown(minutes) {
  const totalSeconds = minutes * 60;
  let remaining = totalSeconds;
  const box = document.getElementById("countdownBox");
  const display = document.getElementById("countdown");

  box.style.display = "block";

  const interval = setInterval(() => {
    const mins = Math.floor(remaining / 60);
    const secs = remaining % 60;
    display.textContent = `${String(mins).padStart(2, "0")}:${String(secs).padStart(2, "0")}`;

    if (remaining <= 0) {
      clearInterval(interval);
      showModal("‚è∞ ƒê√£ h·∫øt th·ªùi gian gi·ªØ ƒë∆°n, vui l√≤ng ƒëƒÉng k√Ω l·∫°i!");
      window.location.reload(); // ho·∫∑c chuy·ªÉn l·∫°i form
    }

    remaining--;
  }, 1000);
}