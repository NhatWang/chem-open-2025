const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');

const UTM_Avo = path.resolve(__dirname, '../public/fonts/UTM Avo.ttf');
const UTM_AvoItalic = path.resolve(__dirname, '../public/fonts/UTM AvoItalic.ttf');
const UTM_AvoBoldItalic = path.resolve(__dirname, '../public/fonts/UTM AvoBold_Italic.ttf');
const UTM_AvoBold = path.resolve(__dirname, '../public/fonts/UTM AvoBold.ttf');

async function generateReceiptPDF(data) {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument({ size: 'A4', margin: 50 });
      const buffers = [];

      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfBuffer = Buffer.concat(buffers);
        resolve(pdfBuffer);
      });

      // ===== Logo =====
      const logoPath = path.resolve(process.cwd(), 'public/images/chemopen/Title2.png');
      if (fs.existsSync(logoPath)) {
        doc.image(logoPath, (doc.page.width - 400) / 2, 30, { width: 400 });
        doc.moveDown(4);
      }
      doc.moveDown(7);

      // ===== Ti√™u ƒë·ªÅ =====
      doc
        .fontSize(20)
        .font(UTM_AvoBold)
        .fillColor('#1a73e8')
        .text('BI√äN NH·∫¨N THANH TO√ÅN', { align: 'center' });

      doc
        .moveDown(0.5)
        .fontSize(20)
        .font(UTM_AvoBold)
        .fillColor('#000')
        .text('GI·∫¢I ƒê·∫§U C·∫¶U L√îNG CHEM-OPEN 2025', { align: 'center' });

      doc
        .moveDown(0.3)
        .fontSize(12)
        .font(UTM_AvoItalic)
        .fillColor('#000')
        .text('CHEM-OPEN 2025 BADMINTON TOURNAMENT', { align: 'center' });

      doc.moveDown(1.5);

      // ===== M√£ x√°c minh =====
      const verifyCode = crypto.createHash('sha1').update(data.paymentCode).digest('hex').slice(-6).toUpperCase();
      doc
        .fontSize(10)
        .fillColor('#888')
        .text(`M√£ x√°c minh: ${verifyCode}`, {
          align: 'left',
          continued: false,
          underline: false,
          link: undefined
        });

      doc.moveDown(0.5);

      // ===== Khung th√¥ng tin =====
      const labelX = 70;
      const valueX = 250;
      const lineHeight = 22;

      doc.moveDown(1);
      doc.fontSize(13).fillColor('#000');
      const infoStartY = doc.y;

      const boxHeight = lineHeight * 10 + 24;
      doc.roundedRect(50, infoStartY - 15, doc.page.width - 100, boxHeight, 10).stroke('#aaa');

      const drawLine = (label, value, yOffset) => {
        const y = infoStartY + yOffset;
        doc.font(UTM_AvoBold).text(label, labelX, y);
        doc.font(UTM_Avo).text(value, valueX, y);
      };

      drawLine("H·ªç t√™n:", data.fullName, 0);
      drawLine("MSSV:", data.mssv, lineHeight);
      drawLine("Email:", data.email, lineHeight * 2);
      drawLine("S·ªë ƒëi·ªán tho·∫°i:", data.phone, lineHeight * 3);
      drawLine("N·ªôi dung thi ƒë·∫•u:", Array.isArray(data.noidung) ? data.noidung.join(", ") : "‚Äî", lineHeight * 4);
      drawLine("S·ªë ti·ªÅn:", `${data.amount.toLocaleString('vi-VN')} VNƒê`, lineHeight * 5);
      drawLine("H√¨nh th·ª©c thanh to√°n:", data.paymentMethod === 'bank' ? "Chuy·ªÉn kho·∫£n" : "PayPal", lineHeight * 6);
      drawLine("M√£ thanh to√°n:", data.paymentCode, lineHeight * 7);
      drawLine("Th·ªùi gian x√°c nh·∫≠n:", new Date().toLocaleString("vi-VN"), lineHeight * 8);
      drawLine("Tr·∫°ng th√°i:", data.paymentStatus === 'paid' ? "ƒê√£ thanh to√°n" : "Ch∆∞a thanh to√°n", lineHeight * 9);

      doc.moveDown(2);

      // ===== Ghi ch√∫ cƒÉn gi·ªØa tuy·ªát ƒë·ªëi =====
      const noteVN = 'L∆∞u √Ω: ƒê√¢y l√† bi√™n nh·∫≠n ƒëi·ªán t·ª≠. Vui l√≤ng gi·ªØ l·∫°i ƒë·ªÉ ƒë·ªëi chi·∫øu khi c·∫ßn.';
      const noteEN = 'Note: This is a digital receipt. Please retain it for verification.';

      doc.fontSize(12).font(UTM_AvoBoldItalic);
      const vnWidth = doc.widthOfString(noteVN);
      const xVN = (doc.page.width - vnWidth) / 2;
      doc.text(noteVN, xVN, doc.y, { lineBreak: false });

      doc.moveDown(1.3);
      doc.fontSize(11).font(UTM_AvoItalic);
      const enWidth = doc.widthOfString(noteEN);
      const xEN = (doc.page.width - enWidth) / 2;
      doc.text(noteEN, xEN, doc.y, { lineBreak: false });

      doc.moveDown(3);

      // ===== K√Ω t√™n cƒÉn gi·ªØa theo kh·ªëi ph·∫£i =====
      const now = new Date();
      const day = now.getDate();
      const month = now.getMonth() + 1;
      const year = now.getFullYear();
      const dateText = `TP. H·ªì Ch√≠ Minh, ng√†y ${day} th√°ng ${month} nƒÉm ${year}`;

      doc.fontSize(12).font(UTM_AvoItalic);
      const x = 300;
      doc.text(dateText, x, doc.y, { lineBreak: false });

      doc.moveDown(1.5);
      doc.font(UTM_Avo);
      const y = 360;
      doc.text("Tr∆∞·ªüng ban Ban T·ªï Ch·ª©c", y, doc.y, { lineBreak: false });

      const seal = path.resolve(process.cwd(), 'public/images/chemopen/stamp.png');
      if (fs.existsSync(seal)) {
        const sealX = 290;
        const sealY = doc.y + 5;
        doc.save(); // üõ°Ô∏è L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i tr∆∞·ªõc khi xoay
        doc.rotate(8, { origin: [sealX + 65, sealY + 65] }); // üîÑ Xoay d·∫•u 12 ƒë·ªô (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
        doc.image(seal, sealX, sealY, { width: 130, opacity: 0.4 });
        doc.restore(); // üîÑ Kh√¥i ph·ª•c tr·∫°ng th√°i ban ƒë·∫ßu ƒë·ªÉ ph·∫ßn sau kh√¥ng b·ªã nghi√™ng
      }
      const sign = path.resolve(process.cwd(), 'public/images/chemopen/sign.png');
      if (fs.existsSync(sign)) {
        const t = 330;
        doc.image(sign, t, doc.y - 5, { width: 200 });
        doc.moveDown(2.5);
      }
      doc.moveDown(4);
      doc.fontSize(14).font(UTM_AvoBold);
      const z = 370;
      doc.text("Nguy·ªÖn Anh ƒê·∫°t", z, doc.y, { lineBreak: false });

      doc.end();
    } catch (err) {
      reject(err);
    }
  });
}

module.exports = generateReceiptPDF;
